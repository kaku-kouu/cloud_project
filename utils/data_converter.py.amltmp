import os.path
from pathlib import Path
import numpy as np
import struct
import  open3d as o3d

ROOT = Path(__file__).parent.parent

# plane_ws = "plane_ws"

# os.makedirs(ROOT/plane_ws,exist_ok=True)

ply_root = ROOT / "temp"

os.makedirs(ply_root,exist_ok=True)


def pcd_from_bin_file(binFilePath):
    size_float = 4
    list_pcd = []
    # if xyzi:

    with open(binFilePath, "rb") as f:
        byte = f.read(size_float * 4)
        while byte:
            x, y, z, intensity = struct.unpack("ffff", byte)
            list_pcd.append([x, y, z])
            byte = f.read(size_float * 4)
    np_pcd = np.asarray(list_pcd)
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(np_pcd)
    return pcd

def pcd_from_csv_file(csvFilePath):

    pcdtarget = o3d.geometry.PointCloud()
    pcddata = np.genfromtxt(csvFilePath,delimiter=",",skip_header=1,usecols=(0,1,2))

    pcdtarget.points = o3d.utility.Vector3dVector(pcddata)

    return pcdtarget

def ply_from_bin_file(binFilePath):
    pcd = pcd_from_bin_file(binFilePath)
    out_file = str(ply_root)+"/pc_2022-02-15_16-30-14_548006.bin (2).csv".replace(".csv",".ply")
    o3d.io.write_point_cloud(out_file,pcd)
    return out_file


def save_ply_with_normal(file,out):
    # import open3d as o3d
    # print("in ",file,"\n out ",out)
    pcd1 = o3d.io.read_point_cloud(file)

    # print("hi",pcd1)

    pcd1.estimate_normals(search_param=o3d.geometry.KDTreeSearchParamHybrid(radius=0.1, max_nn=30))
    # print("here")
    
    if os.path.exists(out):
        return 1
    else:
        o3d.io.write_point_cloud(str(out), pcd1)
        return 0

if __name__ == "__main__":
    ply_from_bin_file("../pcd/n015-2018-11-21-19-58-31+0800__LIDAR_TOP__1542801732498314.pcd.bin")